[
  {
    "objectID": "posts/rag-translation/rag-translation.html",
    "href": "posts/rag-translation/rag-translation.html",
    "title": "RAG Translation",
    "section": "",
    "text": "Install prerequisite libraries for colab\n! pip install -qq datasets\n! pip install -Uqq weaviate-client\nImport required libraries\nfrom datasets import load_dataset\nimport weaviate\nfrom weaviate.classes.init import Auth\nimport weaviate.classes as wvc\nfrom google.colab import userdata\nfrom tqdm.auto import tqdm\nimport google.generativeai as genai\ngenai.configure(api_key=userdata.get(\"GOOGLE_API_KEY\"))"
  },
  {
    "objectID": "posts/rag-translation/rag-translation.html#how-adept-are-current-llms-in-low-resource-languages",
    "href": "posts/rag-translation/rag-translation.html#how-adept-are-current-llms-in-low-resource-languages",
    "title": "RAG Translation",
    "section": "How adept are current LLMs in low-resource languages?",
    "text": "How adept are current LLMs in low-resource languages?\nOne thing that bothered me about the current state of commercial LLMs is how much their performance lagged for low-resource languages. Bengali is once such language, which also happens to be my first/native language. While low-resource, it is certainly not lacking in speakers: Bengali has the fifth highest number of native speakers of any language in the world. Let’s look at an example of Gemini translating English to Bengali:\n\nprompt = \"I may not be able to get this done by the deadline. Can I please get an extension?\"\n\n\nzero_shot_prompt = f\"\"\"\nতুমি একজন সহায়ক সহকারী যে ইংরেজি থেকে বাংলা অনুবাদ করে।\n\nনিম্নলিখিত প্রম্পটটি ইংরেজি থেকে বাংলায় অনুবাদ করো:\n\nইংরেজি:\n{prompt}\nবাংলা:\n\"\"\"\n\n\nmodel = genai.GenerativeModel(\"gemini-1.5-flash\")\nzs_response = model.generate_content(zero_shot_prompt)\nprint(zs_response.text)\n\nসময়মতো কাজটি শেষ করতে পারবো না। কিছুটা সময় বাড়িয়ে দেওয়ার জন্য অনুরোধ করছি। \n\n\n\nFor those of you unfamiliar with Bengali, the translation is correct in the sense that it technically conveys the important information. However, the style leaves much to be desired, and doesn’t read like anything any native Bengali speaker would write.\nIn this article, we will take a look at whether few-shot prompting can increase the performance of translation. Rather than hard-coding example translations, which would be rather time- and energy-intensive, it would also be besides the point for those using the translation capability due to unfamiliarity with the language. Therefore, we will retrieve the few-shot examples from a vector database of translation examples, given the prompt."
  },
  {
    "objectID": "posts/rag-translation/rag-translation.html#constructing-vector-database-for-example-lookups",
    "href": "posts/rag-translation/rag-translation.html#constructing-vector-database-for-example-lookups",
    "title": "RAG Translation",
    "section": "Constructing vector database for example lookups",
    "text": "Constructing vector database for example lookups\nTo construct the vector database, we will be using the ~1000 english-to-bengali translation examples from Cohere’s CohereForAI/aya_collection dataset. In the code cell below, we fetch the dataset, filter out the bengali examples, and then pre-process the examples to remove the translation instructions.\n\n# Load an English to Bengali translation dataset from Aya Collection\ndataset = load_dataset(\"CohereForAI/aya_collection\", \"templated_indic_sentiment\")['train']\ndataset = dataset.filter(lambda example: example['language'] == 'ben')\n\ndataset = dataset.map(lambda ex: {\n    \"from\": ex[\"inputs\"][ex[\"inputs\"].find(\": \\\"\")+3:-1],\n    \"to\": ex[\"targets\"][1:-1],\n})\n\ndataset = dataset.select_columns([\"from\", \"to\"])\n\nNow, we use Google’s embedding API to generate embeddings for all the english prompts. If you are following along, this code cell might take quite a while to finish. You could definitely use other embeddings models, even local ones (you can get a list of the great embedding models in the MTEB Leaderboard). I used Google’s embeddings simply because it’s free, has a simple API, and allows me to get away with a free CPU colab instance to experiment with longer.\n\ntranslation_objs = list()\n\nfor data in tqdm(dataset):\n    google_vec = genai.embed_content(\n        model=\"models/text-embedding-004\",\n        content=data[\"from\"],\n        task_type=\"retrieval_document\",\n        title=\"Embedding of single string\"\n    )\n\n    translation_objs.append(wvc.data.DataObject(\n        properties={\n            \"en\": data[\"from\"],\n            \"bn\": data[\"to\"],\n        },\n        vector=google_vec['embedding'],\n    ))\n\nNext, I store the embeddings in a weaviate cloud collection aptly named Translations. In creating the collection, I specify that I won’t be needing a vectorizer since I’ll be supplying the vectors myself.\n\nclient = weaviate.connect_to_weaviate_cloud(\n    cluster_url=userdata.get(\"WEAVIATE_URL\"),\n    auth_credentials=Auth.api_key(userdata.get(\"WEAVIATE_API\")),\n)\n\n\n# Check if connection to cloud was successfully established\nclient.is_ready()\n\n\nclient.collections.create(\n    \"Translations\",\n    vectorizer_config=wvc.config.Configure.Vectorizer.none(),\n)\n\nFinally, let’s upload the generated embeddings to the collection:\n\ntranslations = client.collections.get(\"Translations\")\ntranslations.data.insert_many(translation_objs)"
  },
  {
    "objectID": "posts/rag-translation/rag-translation.html#generating-translations-with-retrieved-examples",
    "href": "posts/rag-translation/rag-translation.html#generating-translations-with-retrieved-examples",
    "title": "RAG Translation",
    "section": "Generating translations with retrieved examples",
    "text": "Generating translations with retrieved examples\nTo make an RAG query for the examples, we will first embed our prompt, and then querty the weaviate collection for 5 examples:\n\nprompt_embed = genai.embed_content(\n    model=\"models/text-embedding-004\",\n    content=prompt,\n    task_type=\"retrieval_document\",\n    title=\"Embedding of single string\"\n)['embedding']\n\n\ncollection = client.collections.get(\"Translations\")\n\nresponse = collection.query.near_vector(\n    near_vector=prompt_embed,\n    limit=5,\n)\n\nfor obj in response.objects:\n    print(obj.properties[\"en\"])\n    print(obj.properties[\"bn\"])\n\nexamples = response.objects\n\nIt doesn't assemble quickly.\nএটি দ্রুত একত্রিত হয় না।\nAs the frequency is very less, you do not save time here.\nযেহেতু ফ্রিকোয়েন্সি খুব কম, আপনি এখানে সময় বাঁচাতে পারবেন না।\nWere not very punctual in the past.\nআগে আমরা খুব একটা সময়ানুবর্তী ছিলাম না।\nIt is not long-lasting.\nবেশিদিন টিকবে না।\nIt is very expensive.\nএটা অনেক দামি।\n\n\nWith the examples now on hand, we can construct our few-shot prompt. Notice how the non-example part of the prompt is very similar to our zero-shot prompt from up top.\n\nfull_prompt = f\"\"\"\nতুমি একজন সহায়ক সহকারী যে ইংরেজি থেকে বাংলা অনুবাদ করে।\n\nউদাহরণ অনুবাদ:\n\nইংরেজি:\n{examples[0].properties[\"en\"]}\nবাংলা:\n{examples[0].properties[\"bn\"]}\n\nইংরেজি:\n{examples[1].properties[\"en\"]}\nবাংলা:\n{examples[1].properties[\"bn\"]}\n\nইংরেজি:\n{examples[2].properties[\"en\"]}\nবাংলা:\n{examples[2].properties[\"bn\"]}\n\nইংরেজি:\n{examples[3].properties[\"en\"]}\nবাংলা:\n{examples[3].properties[\"bn\"]}\n\nইংরেজি:\n{examples[4].properties[\"en\"]}\nবাংলা:\n{examples[4].properties[\"bn\"]}\n\nএখন নিম্নলিখিত প্রম্পটটি ইংরেজি থেকে বাংলায় অনুবাদ করো:\n\nইংরেজি:\n{prompt}\nবাংলা:\n\"\"\"\n\n\nmodel = genai.GenerativeModel(\"gemini-1.5-flash\")\nfs_response = model.generate_content(full_prompt)\nprint(fs_response.text)\n\nবাংলা: \n\nআমি সময়মতো এটা সম্পন্ন করতে নাও পারি। অনুগ্রহ করে আমাকে কি একটু সময় বাড়িয়ে দেওয়া যাবে? \n\n\n\nVoila! Again, for those of you not familiar with Bengali, this translation gets much closer in terms of pragmatics to how this prompt should ideally be translated to Bengali. The part where an extension is requested is much less blunt than the zero-shot translation, and the meaning of the first sentence is much better conveyed here."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I’m currently interested in working on multi-modal models and more broadly to learn how language and other modalities such as audio and video together aid in learning representations."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "RAG Translation\n\n\n\n\n\nIn this post, we take a look into the effectiveness of few-shot prompting in machine translation for low-resource languages\n\n\n\n\n\nNov 2, 2024\n\n\nFahim Faisal\n\n\n\n\n\n\nNo matching items"
  }
]